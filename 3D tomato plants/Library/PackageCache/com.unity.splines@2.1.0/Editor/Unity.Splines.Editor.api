// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace UnityEditor.Splines
{
    [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false)] [System.Obsolete(@"Use SplineDataHandles.DataPointHandles instead and EditorTools to interact with SplineData.", false)] public class CustomSplineDataHandle : System.Attribute
    {
        public CustomSplineDataHandle(System.Type type) {}
    }

    public static class EditorSplineUtility
    {
        [System.Obsolete(@"Use AfterSplineWasModified instead.", false)] public static event System.Action<UnityEngine.Splines.Spline> afterSplineWasModified;
        public static event System.Action<UnityEngine.Splines.Spline> AfterSplineWasModified;
        public static UnityEngine.Splines.TangentMode DefaultTangentMode { get; }
        public static void RegisterSplineDataChanged<T>(System.Action<UnityEngine.Splines.SplineData<T>> action);
        public static void SetKnotPlacementTool();
        public static void UnregisterSplineDataChanged<T>(System.Action<UnityEngine.Splines.SplineData<T>> action);
    }

    [System.Obsolete(@"Use SplineDataHandles.DataPointHandles instead and EditorTools to interact with SplineData.", false)] public abstract class SplineDataHandle<T>
    {
        public UnityEngine.Splines.SplineDataHandleAttribute attribute { get; }
        public int[] controlIDs { get; }
        protected SplineDataHandle() {}
        public virtual void DrawDataPoint(int controlID, UnityEngine.Vector3 position, UnityEngine.Vector3 direction, UnityEngine.Vector3 upDirection, UnityEngine.Splines.SplineData<T> splineData, int dataPointIndex);
        public virtual void DrawSplineData(UnityEngine.Splines.SplineData<T> splineData, UnityEngine.Splines.Spline spline, UnityEngine.Matrix4x4 localToWorld, UnityEngine.Color color);
    }

    public static class SplineDataHandles
    {
        public static void DataPointHandles<TSpline, TData>(this TSpline spline, UnityEngine.Splines.SplineData<TData> splineData, bool useDefaultValueOnAdd = false) where TSpline : UnityEngine.Splines.ISpline;
    }

    public static class SplineGizmoUtility
    {
        public static void DrawGizmos(UnityEngine.Splines.ISplineContainer container);
        [System.Obsolete(@"Use the overload that uses ISplineContainer")] public static void DrawGizmos(UnityEngine.Splines.ISplineProvider provider);
    }

    public static class SplineHandles
    {
        public static void DoCurve(UnityEngine.Splines.BezierCurve curve);
        public static void DoCurve(int controlID, UnityEngine.Splines.BezierCurve curve);
        public static void DoSpline<T>(T spline) where T : UnityEngine.Splines.ISpline;
        public static void DoSpline<T>(int controlID, T spline) where T : UnityEngine.Splines.ISpline;
    }

    public class SplineMeshHandle<T> : System.IDisposable where T : UnityEngine.Splines.ISpline
    {
        public SplineMeshHandle() {}
        public void Dispose();
        public void Do(T spline, float size, int resolution = 10);
        public void Do(int controlID, T spline, float size, int resolution = 10);
        public void Do(T spline, float size, UnityEngine.Color color, int resolution = 10);
        public void Do(int controlID, T spline, float size, UnityEngine.Color color, int resolution = 10);
    }

    [UnityEditor.EditorTools.EditorToolContext(@"Spline", typeof(UnityEngine.Splines.ISplineContainer))] [UnityEngine.Icon(@"Packages/com.unity.splines/Editor/Resources/Icons/SplineContext.png")] public sealed class SplineToolContext : UnityEditor.EditorTools.EditorToolContext
    {
        public SplineToolContext() {}
        protected override System.Type GetEditorToolType(Tool tool);
        public override void OnActivated();
        public override void OnToolGUI(EditorWindow window);
        public override void OnWillBeDeactivated();
    }
}
